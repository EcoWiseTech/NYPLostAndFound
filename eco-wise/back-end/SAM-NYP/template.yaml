AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM-NYP

  Sample SAM Template for SAM-NYP

Globals:
  Function:
    Timeout: 60
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:
## ------------------------------
## SNS Topic: NotificationTopic
## ------------------------------
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: "New Item Notification Topic"
      TopicName: "AllNotificationsTopic" # Change this as necessary
      Subscription:
        - Endpoint: "brianyuk@gmail.com"  # Add email addresses or other subscribers
          Protocol: "email"     
  ## ------------------------------
  ## DynamoDB Table: ItemTable
  ## ------------------------------
  ItemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ItemTable
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ## ------------------------------
  ## S3 Bucket: ItemImageS3Bucket
  ## ------------------------------
  ItemImageS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "nyp-lost-and-found-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedHeaders:
              - "*"

  ## ------------------------------
  ## Lambda Function: StoreItemFunction
  ## ------------------------------
  StoreItemFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: StoreItemFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonDynamoDBFullAccess # Allows full access to DynamoDB (adjust as needed)
        - AmazonS3FullAccess
        - AmazonSNSFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTable
          S3_BUCKET_NAME: !Ref ItemImageS3Bucket
      Events:
        StoreItemApiResource:
          Type: Api 
          Properties:
            Path: /StoreItem
            Method: post
  ## ------------------------------
  ## Lambda Function: StoreItemFunction
  ## ------------------------------
  UpdateItemFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: UpdateItemFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonDynamoDBFullAccess # Allows full access to DynamoDB (adjust as needed)
        - AmazonS3FullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTable
          S3_BUCKET_NAME: !Ref ItemImageS3Bucket
      Events:
        UpdateItemApiResource:
          Type: Api 
          Properties:
            Path: /UpdateItem
            Method: put
  ## ------------------------------
  ## Lambda Function: GetItemFunction
  ## ------------------------------
  GetItemFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: GetItemFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTable
      Events:
        GetItemResource:
          Type: Api 
          Properties:
            Path: /GetItem
            Method: get
  ## ------------------------------
  ## Lambda Function: DeleteItemFunction
  ## ------------------------------
  DeleteItemFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: DeleteItemFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonDynamoDBFullAccess
        - AmazonS3FullAccess
      Environment:
        Variables:
          TABLE_NAME: !Ref ItemTable
          S3_BUCKET_NAME: !Ref ItemImageS3Bucket
      Events:
        DeleteItemResource:
          Type: Api 
          Properties:
            Path: /DeleteItem
            Method: post
  ## ------------------------------
## Lambda Function: ModifyAllNotifications
## ------------------------------
  ModifyAllNotificationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ModifyAllNotificationFunction/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      Policies:
        - AmazonSNSFullAccess      # Full access to SNS for publishing notifications
        - AmazonDynamoDBFullAccess # Full access to DynamoDB if needed for modifying item data
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic   # Reference to your SNS topic ARN
          TABLE_NAME: !Ref ItemTable              # Reference to your DynamoDB table (optional if interacting with DynamoDB)
      Events:
        ModifyAllNotificationsResource:
          Type: Api
          Properties:
            Path: /ModifyAllNotifications      # Endpoint path to invoke the Lambda function
            Method: post                       # HTTP method for triggering the Lambda function

        


Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for StoreItem function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/StoreItem/"
  StoreItemFunctionArn:
    Description: "StoreItemFunction Lambda Function ARN"
    Value: !GetAtt StoreItemFunction.Arn
  StoreItemFunctionIamRole:
    Description: "IAM Role for StoreItemFunction"
    Value: !GetAtt StoreItemFunctionRole.Arn
  GetItemFunctionArn:
    Description: "GetItemFunction Lambda Function ARN"
    Value: !GetAtt GetItemFunction.Arn
  GetItemFunctionIAMRole:
    Description: "IAM Role for GetItemFunction"
    Value: !GetAtt GetItemFunctionRole.Arn
  DeleteItemFunctionArn:
    Description: "DeleteItemFunction Lambda Function ARN"
    Value: !GetAtt DeleteItemFunction.Arn
  DeleteItemFunctionIAMRole:
    Description: "IAM Role for DeleteItemFunction"
    Value: !GetAtt DeleteItemFunctionRole.Arn
  UpdateItemFunctionArn:
    Description: "UpdateItemFunction Lambda Function ARN"
    Value: !GetAtt UpdateItemFunction.Arn
  UpdateItemFunctionIAMRole:
    Description: "IAM Role for UpdateItemFunction"
    Value: !GetAtt UpdateItemFunctionRole.Arn
  ItemTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref ItemTable
  ItemImageS3BucketName:
    Description: "S3 Bucket Name for Item Images"
    Value: !Ref ItemImageS3Bucket
